package dk.trustworks.userservice.repositories;

import dk.trustworks.userservice.model.Role;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

public class RoleRepository {

    private JDBCClient jdbc;

    public RoleRepository(JDBCClient jdbc) {
        this.jdbc = jdbc;
    }

    private Single<SQLConnection> connect() {
        return jdbc.rxGetConnection()
                .map(c -> c.setOptions(new SQLOptions().setAutoGeneratedKeys(true)));
    }

    private Single<List<Role>> query(SQLConnection connection) {
        return connection.rxQuery("SELECT * FROM roles")
                .map(rs -> rs.getRows().stream().map(Role::new).collect(Collectors.toList()))
                .doFinally(connection::close);
    }

    private Single<List<Role>> queryByUser(SQLConnection connection, String userUUID) {
        return connection.rxQueryWithParams("SELECT * FROM roles where useruuid LIKE ?", new JsonArray().add(userUUID))
                .map(rs -> rs.getRows().stream().map(Role::new).collect(Collectors.toList()))
                .doFinally(connection::close);
    }

    private Single<Role> queryOne(SQLConnection connection, String uuid) {
        String sql = "SELECT * FROM roles WHERE uuid LIKE ?";
        return connection.rxQueryWithParams(sql, new JsonArray().add(uuid))
                .doFinally(connection::close)
                .map(rs -> {
                    List<JsonObject> rows = rs.getRows();
                    if (rows.size() == 0) {
                        throw new NoSuchElementException("No role with id " + uuid);
                    } else {
                        JsonObject row = rows.get(0);
                        return new Role(row);
                    }
                });
    }

    public Single<List<Role>> getAllRoles() {
        return connect().flatMap(this::query);
    }

    public Single<List<Role>> getAllUserRoles(String userUUID) {
        return connect().flatMap((SQLConnection connection) -> queryByUser(connection, userUUID));
    }

    public Single<Role> getOne(String uuid) {
        return connect().flatMap(connection -> queryOne(connection, uuid));
    }
}
